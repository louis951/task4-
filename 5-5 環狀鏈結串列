#include <iostream>
using namespace std;

class ListNode
{
public:
	ListNode(int a) { data = a; link = 0; }
private:
	int data;
	ListNode *link;
	friend class CircularList;
};
class CircularList {
private:
	ListNode *last = 0;
public:
	void InsertFirst(int x) {
		ListNode *temp = new ListNode(x);
		if (last == 0)
			last = temp;
		temp->link = last->link;
		last->link = temp;
	}
	void InsertLast(int x) {
		ListNode *temp = new ListNode(x);
		if (last == 0)
			last = temp;
		temp->link = last->link;
		last->link = temp;
		last = temp;
	}
	int DeleteFirst() {
		int x = last->link->data;
		last->link = last->link->link;
		return x;
	}
	int DeleteLast() {
		ListNode *temp = last->link;
		int x = last->data;
		while (temp->link != last)
			temp = temp->link;
		temp->link = last->link;
		last = temp;
		return x;
	}
	void PrintList() {
		ListNode *temp = last->link;
		do {
			cout << temp->data << " ";
			temp = temp->link;
		} while (temp != last->link);
	}
};
int main(int argc, char *argv[])
{
	CircularList list;
	int times, input;
	for (cin >> times; times > 0; times--) { cin >> input; list.InsertFirst(input); }
	for (cin >> times; times > 0; times--) list.DeleteFirst();
	for (cin >> times; times > 0; times--) { cin >> input; list.InsertLast(input); }
	for (cin >> times; times > 0; times--) list.DeleteLast();
	list.PrintList();
}
