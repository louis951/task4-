#include <iostream>
using namespace std;
class ListNode{
public:
	ListNode(int a) { 
		data = a; link = 0; 
	}
private:
	int data;
	ListNode *link;
	friend class LinkedList;
};

class LinkedList{
private:
	ListNode *first;
	ListNode *last;
public:
	LinkedList() {
		first = 0;
		last = 0;
	}
	void InsertFirst(int x) {
		ListNode *temp = new ListNode(x);
		temp->link = first;
		first = temp;
	}
	void InsertLast(int x) {
		ListNode *temp = new ListNode(x);

		if (first == 0)
			first = temp;
		else {
			ListNode *current = first;
			while (current->link != NULL) {
				current = current->link;
			}
			current->link = temp;
		}
	}
	int DeleteFirst() {
		ListNode *temp = first;
		first = temp->link;
		return temp->data;
	}
	int DeleteLast() {
		ListNode *temp = first;
		while ((temp->link)->link != NULL) {
			temp = temp->link;
		}
		int x = (temp->link)->data;
		temp->link = NULL;
		return x;
	}
	void PrintList() {
		ListNode *temp = first;
		while (temp != NULL) {
			cout << temp->data << " ";
			temp = temp->link;
		}
		cout << endl;
	}
	void Reverse() {
		ListNode *forward = first;
		ListNode *current = NULL;
		ListNode *prev = NULL;

		while (forward->link != NULL) {
			prev = current;
			current = forward;
			forward = forward->link;
			current->link = prev;
		}
		forward->link = current;
		first = forward;
	}
};
class Queue {
public:
	LinkedList list;
	Queue() {

	}
	void Enqueue(int x) {
		list.InsertLast(x);
	}
	int Dequeue() {
		return list.DeleteFirst();
	}
	void PrintQueue() {
		list.PrintList();
	}
};
int main(int argc, char *argv[]){
	Queue queue;
	int times, input;
	for (cin >> times; times > 0; times--) { cin >> input; queue.Enqueue(input); }
	for (cin >> times; times > 0; times--) queue.Dequeue();
	queue.PrintQueue();
}
